=begin
#CircleCI API

#This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module CircleciOpenapi
  # Job Details
  class JobDetails
    # URL of the job in CircleCI Web UI.
    attr_accessor :web_url

    attr_accessor :project

    # Info about parallels runs and their status.
    attr_accessor :parallel_runs

    # The date and time the job started.
    attr_accessor :started_at

    attr_accessor :latest_workflow

    # The name of the job.
    attr_accessor :name

    attr_accessor :executor

    # A number of parallel runs the job has.
    attr_accessor :parallelism

    # The current status of the job.
    attr_accessor :status

    # The number of the job.
    attr_accessor :number

    attr_accessor :pipeline

    # Duration of a job in milliseconds.
    attr_accessor :duration

    # The time when the job was created.
    attr_accessor :created_at

    # Messages from CircleCI execution platform.
    attr_accessor :messages

    # List of contexts used by the job.
    attr_accessor :contexts

    attr_accessor :organization

    # The time when the job was placed in a queue.
    attr_accessor :queued_at

    # The time when the job stopped.
    attr_accessor :stopped_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'web_url' => :'web_url',
        :'project' => :'project',
        :'parallel_runs' => :'parallel_runs',
        :'started_at' => :'started_at',
        :'latest_workflow' => :'latest_workflow',
        :'name' => :'name',
        :'executor' => :'executor',
        :'parallelism' => :'parallelism',
        :'status' => :'status',
        :'number' => :'number',
        :'pipeline' => :'pipeline',
        :'duration' => :'duration',
        :'created_at' => :'created_at',
        :'messages' => :'messages',
        :'contexts' => :'contexts',
        :'organization' => :'organization',
        :'queued_at' => :'queued_at',
        :'stopped_at' => :'stopped_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'web_url' => :'String',
        :'project' => :'JobDetailsProject',
        :'parallel_runs' => :'Array<JobDetailsParallelRuns>',
        :'started_at' => :'Time',
        :'latest_workflow' => :'JobDetailsLatestWorkflow',
        :'name' => :'String',
        :'executor' => :'JobDetailsExecutor',
        :'parallelism' => :'Integer',
        :'status' => :'AnyType',
        :'number' => :'Integer',
        :'pipeline' => :'JobDetailsPipeline',
        :'duration' => :'Integer',
        :'created_at' => :'Time',
        :'messages' => :'Array<JobDetailsMessages>',
        :'contexts' => :'Array<JobDetailsContexts>',
        :'organization' => :'JobDetailsOrganization',
        :'queued_at' => :'Time',
        :'stopped_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'status',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CircleciOpenapi::JobDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CircleciOpenapi::JobDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'web_url')
        self.web_url = attributes[:'web_url']
      end

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.key?(:'parallel_runs')
        if (value = attributes[:'parallel_runs']).is_a?(Array)
          self.parallel_runs = value
        end
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'latest_workflow')
        self.latest_workflow = attributes[:'latest_workflow']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'executor')
        self.executor = attributes[:'executor']
      end

      if attributes.key?(:'parallelism')
        self.parallelism = attributes[:'parallelism']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'pipeline')
        self.pipeline = attributes[:'pipeline']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'messages')
        if (value = attributes[:'messages']).is_a?(Array)
          self.messages = value
        end
      end

      if attributes.key?(:'contexts')
        if (value = attributes[:'contexts']).is_a?(Array)
          self.contexts = value
        end
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'queued_at')
        self.queued_at = attributes[:'queued_at']
      end

      if attributes.key?(:'stopped_at')
        self.stopped_at = attributes[:'stopped_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @web_url.nil?
        invalid_properties.push('invalid value for "web_url", web_url cannot be nil.')
      end

      if @project.nil?
        invalid_properties.push('invalid value for "project", project cannot be nil.')
      end

      if @parallel_runs.nil?
        invalid_properties.push('invalid value for "parallel_runs", parallel_runs cannot be nil.')
      end

      if @started_at.nil?
        invalid_properties.push('invalid value for "started_at", started_at cannot be nil.')
      end

      if @latest_workflow.nil?
        invalid_properties.push('invalid value for "latest_workflow", latest_workflow cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @executor.nil?
        invalid_properties.push('invalid value for "executor", executor cannot be nil.')
      end

      if @parallelism.nil?
        invalid_properties.push('invalid value for "parallelism", parallelism cannot be nil.')
      end

      if @number.nil?
        invalid_properties.push('invalid value for "number", number cannot be nil.')
      end

      if @pipeline.nil?
        invalid_properties.push('invalid value for "pipeline", pipeline cannot be nil.')
      end

      if @duration.nil?
        invalid_properties.push('invalid value for "duration", duration cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @messages.nil?
        invalid_properties.push('invalid value for "messages", messages cannot be nil.')
      end

      if @contexts.nil?
        invalid_properties.push('invalid value for "contexts", contexts cannot be nil.')
      end

      if @organization.nil?
        invalid_properties.push('invalid value for "organization", organization cannot be nil.')
      end

      if @queued_at.nil?
        invalid_properties.push('invalid value for "queued_at", queued_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @web_url.nil?
      return false if @project.nil?
      return false if @parallel_runs.nil?
      return false if @started_at.nil?
      return false if @latest_workflow.nil?
      return false if @name.nil?
      return false if @executor.nil?
      return false if @parallelism.nil?
      return false if @number.nil?
      return false if @pipeline.nil?
      return false if @duration.nil?
      return false if @created_at.nil?
      return false if @messages.nil?
      return false if @contexts.nil?
      return false if @organization.nil?
      return false if @queued_at.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          web_url == o.web_url &&
          project == o.project &&
          parallel_runs == o.parallel_runs &&
          started_at == o.started_at &&
          latest_workflow == o.latest_workflow &&
          name == o.name &&
          executor == o.executor &&
          parallelism == o.parallelism &&
          status == o.status &&
          number == o.number &&
          pipeline == o.pipeline &&
          duration == o.duration &&
          created_at == o.created_at &&
          messages == o.messages &&
          contexts == o.contexts &&
          organization == o.organization &&
          queued_at == o.queued_at &&
          stopped_at == o.stopped_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [web_url, project, parallel_runs, started_at, latest_workflow, name, executor, parallelism, status, number, pipeline, duration, created_at, messages, contexts, organization, queued_at, stopped_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CircleciOpenapi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

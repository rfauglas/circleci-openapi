=begin
#CircleCI API

#This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module CircleciOpenapi
  # A workflow
  class Workflow
    # The ID of the pipeline this workflow belongs to.
    attr_accessor :pipeline_id

    attr_accessor :canceled_by

    # The unique ID of the workflow.
    attr_accessor :id

    # The name of the workflow.
    attr_accessor :name

    # The project-slug for the pipeline this workflow belongs to.
    attr_accessor :project_slug

    attr_accessor :errored_by

    # Tag used for the workflow
    attr_accessor :tag

    # The current status of the workflow.
    attr_accessor :status

    attr_accessor :started_by

    # The number of the pipeline this workflow belongs to.
    attr_accessor :pipeline_number

    # The date and time the workflow was created.
    attr_accessor :created_at

    # The date and time the workflow stopped.
    attr_accessor :stopped_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pipeline_id' => :'pipeline_id',
        :'canceled_by' => :'canceled_by',
        :'id' => :'id',
        :'name' => :'name',
        :'project_slug' => :'project_slug',
        :'errored_by' => :'errored_by',
        :'tag' => :'tag',
        :'status' => :'status',
        :'started_by' => :'started_by',
        :'pipeline_number' => :'pipeline_number',
        :'created_at' => :'created_at',
        :'stopped_at' => :'stopped_at'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'pipeline_id' => :'String',
        :'canceled_by' => :'String',
        :'id' => :'String',
        :'name' => :'String',
        :'project_slug' => :'String',
        :'errored_by' => :'String',
        :'tag' => :'String',
        :'status' => :'String',
        :'started_by' => :'String',
        :'pipeline_number' => :'Integer',
        :'created_at' => :'Time',
        :'stopped_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CircleciOpenapi::Workflow` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CircleciOpenapi::Workflow`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'pipeline_id')
        self.pipeline_id = attributes[:'pipeline_id']
      end

      if attributes.key?(:'canceled_by')
        self.canceled_by = attributes[:'canceled_by']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'project_slug')
        self.project_slug = attributes[:'project_slug']
      end

      if attributes.key?(:'errored_by')
        self.errored_by = attributes[:'errored_by']
      end

      if attributes.key?(:'tag')
        self.tag = attributes[:'tag']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'started_by')
        self.started_by = attributes[:'started_by']
      end

      if attributes.key?(:'pipeline_number')
        self.pipeline_number = attributes[:'pipeline_number']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'stopped_at')
        self.stopped_at = attributes[:'stopped_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @pipeline_id.nil?
        invalid_properties.push('invalid value for "pipeline_id", pipeline_id cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @project_slug.nil?
        invalid_properties.push('invalid value for "project_slug", project_slug cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @started_by.nil?
        invalid_properties.push('invalid value for "started_by", started_by cannot be nil.')
      end

      if @pipeline_number.nil?
        invalid_properties.push('invalid value for "pipeline_number", pipeline_number cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @stopped_at.nil?
        invalid_properties.push('invalid value for "stopped_at", stopped_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @pipeline_id.nil?
      return false if @id.nil?
      return false if @name.nil?
      return false if @project_slug.nil?
      tag_validator = EnumAttributeValidator.new('String', ["setup"])
      return false unless tag_validator.valid?(@tag)
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["success", "running", "not_run", "failed", "error", "failing", "on_hold", "canceled", "unauthorized"])
      return false unless status_validator.valid?(@status)
      return false if @started_by.nil?
      return false if @pipeline_number.nil?
      return false if @created_at.nil?
      return false if @stopped_at.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tag Object to be assigned
    def tag=(tag)
      validator = EnumAttributeValidator.new('String', ["setup"])
      unless validator.valid?(tag)
        fail ArgumentError, "invalid value for \"tag\", must be one of #{validator.allowable_values}."
      end
      @tag = tag
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["success", "running", "not_run", "failed", "error", "failing", "on_hold", "canceled", "unauthorized"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pipeline_id == o.pipeline_id &&
          canceled_by == o.canceled_by &&
          id == o.id &&
          name == o.name &&
          project_slug == o.project_slug &&
          errored_by == o.errored_by &&
          tag == o.tag &&
          status == o.status &&
          started_by == o.started_by &&
          pipeline_number == o.pipeline_number &&
          created_at == o.created_at &&
          stopped_at == o.stopped_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pipeline_id, canceled_by, id, name, project_slug, errored_by, tag, status, started_by, pipeline_number, created_at, stopped_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CircleciOpenapi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

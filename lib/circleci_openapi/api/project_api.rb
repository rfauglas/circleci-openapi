=begin
#CircleCI API

#This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'cgi'

module CircleciOpenapi
  class ProjectApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new checkout key
    # Creates a new checkout key. This API request is only usable with a user API token.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param [Hash] opts the optional parameters
    # @option opts [CheckoutKeyInput] :checkout_key_input 
    # @return [CheckoutKey]
    def create_checkout_key(project_slug, opts = {})
      data, _status_code, _headers = create_checkout_key_with_http_info(project_slug, opts)
      data
    end

    # Create a new checkout key
    # Creates a new checkout key. This API request is only usable with a user API token.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param [Hash] opts the optional parameters
    # @option opts [CheckoutKeyInput] :checkout_key_input 
    # @return [Array<(CheckoutKey, Integer, Hash)>] CheckoutKey data, response status code and response headers
    def create_checkout_key_with_http_info(project_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.create_checkout_key ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling ProjectApi.create_checkout_key"
      end
      # resource path
      local_var_path = '/project/{project-slug}/checkout-key'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'checkout_key_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'CheckoutKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"ProjectApi.create_checkout_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#create_checkout_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an environment variable
    # Creates a new environment variable.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param [Hash] opts the optional parameters
    # @option opts [EnvironmentVariablePair1] :environment_variable_pair1 
    # @return [EnvironmentVariablePair1]
    def create_env_var(project_slug, opts = {})
      data, _status_code, _headers = create_env_var_with_http_info(project_slug, opts)
      data
    end

    # Create an environment variable
    # Creates a new environment variable.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param [Hash] opts the optional parameters
    # @option opts [EnvironmentVariablePair1] :environment_variable_pair1 
    # @return [Array<(EnvironmentVariablePair1, Integer, Hash)>] EnvironmentVariablePair1 data, response status code and response headers
    def create_env_var_with_http_info(project_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.create_env_var ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling ProjectApi.create_env_var"
      end
      # resource path
      local_var_path = '/project/{project-slug}/envvar'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'environment_variable_pair1'])

      # return_type
      return_type = opts[:debug_return_type] || 'EnvironmentVariablePair1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"ProjectApi.create_env_var",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#create_env_var\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a checkout key
    # Deletes the checkout key.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param fingerprint [String] An SSH key fingerprint.
    # @param [Hash] opts the optional parameters
    # @return [MessageResponse]
    def delete_checkout_key(project_slug, fingerprint, opts = {})
      data, _status_code, _headers = delete_checkout_key_with_http_info(project_slug, fingerprint, opts)
      data
    end

    # Delete a checkout key
    # Deletes the checkout key.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param fingerprint [String] An SSH key fingerprint.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def delete_checkout_key_with_http_info(project_slug, fingerprint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.delete_checkout_key ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling ProjectApi.delete_checkout_key"
      end
      # verify the required parameter 'fingerprint' is set
      if @api_client.config.client_side_validation && fingerprint.nil?
        fail ArgumentError, "Missing the required parameter 'fingerprint' when calling ProjectApi.delete_checkout_key"
      end
      # resource path
      local_var_path = '/project/{project-slug}/checkout-key/{fingerprint}'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s)).sub('{' + 'fingerprint' + '}', CGI.escape(fingerprint.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"ProjectApi.delete_checkout_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#delete_checkout_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an environment variable
    # Deletes the environment variable named :name.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param name [String] The name of the environment variable.
    # @param [Hash] opts the optional parameters
    # @return [MessageResponse]
    def delete_env_var(project_slug, name, opts = {})
      data, _status_code, _headers = delete_env_var_with_http_info(project_slug, name, opts)
      data
    end

    # Delete an environment variable
    # Deletes the environment variable named :name.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param name [String] The name of the environment variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageResponse, Integer, Hash)>] MessageResponse data, response status code and response headers
    def delete_env_var_with_http_info(project_slug, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.delete_env_var ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling ProjectApi.delete_env_var"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ProjectApi.delete_env_var"
      end
      # resource path
      local_var_path = '/project/{project-slug}/envvar/{name}'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"ProjectApi.delete_env_var",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#delete_env_var\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a checkout key
    # Returns an individual checkout key.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param fingerprint [String] An SSH key fingerprint.
    # @param [Hash] opts the optional parameters
    # @return [CheckoutKey]
    def get_checkout_key(project_slug, fingerprint, opts = {})
      data, _status_code, _headers = get_checkout_key_with_http_info(project_slug, fingerprint, opts)
      data
    end

    # Get a checkout key
    # Returns an individual checkout key.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param fingerprint [String] An SSH key fingerprint.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckoutKey, Integer, Hash)>] CheckoutKey data, response status code and response headers
    def get_checkout_key_with_http_info(project_slug, fingerprint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.get_checkout_key ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling ProjectApi.get_checkout_key"
      end
      # verify the required parameter 'fingerprint' is set
      if @api_client.config.client_side_validation && fingerprint.nil?
        fail ArgumentError, "Missing the required parameter 'fingerprint' when calling ProjectApi.get_checkout_key"
      end
      # resource path
      local_var_path = '/project/{project-slug}/checkout-key/{fingerprint}'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s)).sub('{' + 'fingerprint' + '}', CGI.escape(fingerprint.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckoutKey'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"ProjectApi.get_checkout_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#get_checkout_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a masked environment variable
    # Returns the masked value of environment variable :name.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param name [String] The name of the environment variable.
    # @param [Hash] opts the optional parameters
    # @return [EnvironmentVariablePair1]
    def get_env_var(project_slug, name, opts = {})
      data, _status_code, _headers = get_env_var_with_http_info(project_slug, name, opts)
      data
    end

    # Get a masked environment variable
    # Returns the masked value of environment variable :name.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param name [String] The name of the environment variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnvironmentVariablePair1, Integer, Hash)>] EnvironmentVariablePair1 data, response status code and response headers
    def get_env_var_with_http_info(project_slug, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.get_env_var ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling ProjectApi.get_env_var"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ProjectApi.get_env_var"
      end
      # resource path
      local_var_path = '/project/{project-slug}/envvar/{name}'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnvironmentVariablePair1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"ProjectApi.get_env_var",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#get_env_var\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a project
    # Retrieves a project by project slug.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def get_project_by_slug(project_slug, opts = {})
      data, _status_code, _headers = get_project_by_slug_with_http_info(project_slug, opts)
      data
    end

    # Get a project
    # Retrieves a project by project slug.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def get_project_by_slug_with_http_info(project_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.get_project_by_slug ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling ProjectApi.get_project_by_slug"
      end
      # resource path
      local_var_path = '/project/{project-slug}'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"ProjectApi.get_project_by_slug",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#get_project_by_slug\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all checkout keys
    # Returns a sequence of checkout keys for `:project`.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param [Hash] opts the optional parameters
    # @return [CheckoutKeyListResponse]
    def list_checkout_keys(project_slug, opts = {})
      data, _status_code, _headers = list_checkout_keys_with_http_info(project_slug, opts)
      data
    end

    # Get all checkout keys
    # Returns a sequence of checkout keys for &#x60;:project&#x60;.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckoutKeyListResponse, Integer, Hash)>] CheckoutKeyListResponse data, response status code and response headers
    def list_checkout_keys_with_http_info(project_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.list_checkout_keys ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling ProjectApi.list_checkout_keys"
      end
      # resource path
      local_var_path = '/project/{project-slug}/checkout-key'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CheckoutKeyListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"ProjectApi.list_checkout_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#list_checkout_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all environment variables
    # Returns four 'x' characters, in addition to the last four ASCII characters of the value, consistent with the display of environment variable values on the CircleCI website.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param [Hash] opts the optional parameters
    # @return [EnvironmentVariableListResponse]
    def list_env_vars(project_slug, opts = {})
      data, _status_code, _headers = list_env_vars_with_http_info(project_slug, opts)
      data
    end

    # List all environment variables
    # Returns four &#39;x&#39; characters, in addition to the last four ASCII characters of the value, consistent with the display of environment variable values on the CircleCI website.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnvironmentVariableListResponse, Integer, Hash)>] EnvironmentVariableListResponse data, response status code and response headers
    def list_env_vars_with_http_info(project_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectApi.list_env_vars ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling ProjectApi.list_env_vars"
      end
      # resource path
      local_var_path = '/project/{project-slug}/envvar'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnvironmentVariableListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"ProjectApi.list_env_vars",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectApi#list_env_vars\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

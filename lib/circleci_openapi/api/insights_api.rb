=begin
#CircleCI API

#This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'cgi'

module CircleciOpenapi
  class InsightsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get recent runs of a workflow job
    # Get recent runs of a job within a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param workflow_name [String] The name of the workflow.
    # @param job_name [String] The name of the job.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :branch The name of a vcs branch. If not passed we will scope the API call to the default branch.
    # @option opts [String] :page_token A token to retrieve the next page of results.
    # @option opts [Time] :start_date Include only executions that started at or after this date. This must be specified if an end-date is provided.
    # @option opts [Time] :end_date Include only executions that started before this date. This date can be at most 90 days after the start-date.
    # @return [InlineResponse2005]
    def get_project_job_runs(project_slug, workflow_name, job_name, opts = {})
      data, _status_code, _headers = get_project_job_runs_with_http_info(project_slug, workflow_name, job_name, opts)
      data
    end

    # Get recent runs of a workflow job
    # Get recent runs of a job within a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param workflow_name [String] The name of the workflow.
    # @param job_name [String] The name of the job.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :branch The name of a vcs branch. If not passed we will scope the API call to the default branch.
    # @option opts [String] :page_token A token to retrieve the next page of results.
    # @option opts [Time] :start_date Include only executions that started at or after this date. This must be specified if an end-date is provided.
    # @option opts [Time] :end_date Include only executions that started before this date. This date can be at most 90 days after the start-date.
    # @return [Array<(InlineResponse2005, Integer, Hash)>] InlineResponse2005 data, response status code and response headers
    def get_project_job_runs_with_http_info(project_slug, workflow_name, job_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.get_project_job_runs ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling InsightsApi.get_project_job_runs"
      end
      # verify the required parameter 'workflow_name' is set
      if @api_client.config.client_side_validation && workflow_name.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_name' when calling InsightsApi.get_project_job_runs"
      end
      # verify the required parameter 'job_name' is set
      if @api_client.config.client_side_validation && job_name.nil?
        fail ArgumentError, "Missing the required parameter 'job_name' when calling InsightsApi.get_project_job_runs"
      end
      # resource path
      local_var_path = '/insights/{project-slug}/workflows/{workflow-name}/jobs/{job-name}'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s)).sub('{' + 'workflow-name' + '}', CGI.escape(workflow_name.to_s)).sub('{' + 'job-name' + '}', CGI.escape(job_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'branch'] = opts[:'branch'] if !opts[:'branch'].nil?
      query_params[:'page-token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'start-date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end-date'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2005'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"InsightsApi.get_project_job_runs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#get_project_job_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get summary metrics for a project workflow's jobs.
    # Get summary metrics for a project workflow's jobs. Job runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param workflow_name [String] The name of the workflow.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token A token to retrieve the next page of results.
    # @option opts [String] :branch The name of a vcs branch. If not passed we will scope the API call to the default branch.
    # @option opts [String] :reporting_window The time window used to calculate summary metrics.
    # @return [InlineResponse2004]
    def get_project_workflow_job_metrics(project_slug, workflow_name, opts = {})
      data, _status_code, _headers = get_project_workflow_job_metrics_with_http_info(project_slug, workflow_name, opts)
      data
    end

    # Get summary metrics for a project workflow&#39;s jobs.
    # Get summary metrics for a project workflow&#39;s jobs. Job runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param workflow_name [String] The name of the workflow.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token A token to retrieve the next page of results.
    # @option opts [String] :branch The name of a vcs branch. If not passed we will scope the API call to the default branch.
    # @option opts [String] :reporting_window The time window used to calculate summary metrics.
    # @return [Array<(InlineResponse2004, Integer, Hash)>] InlineResponse2004 data, response status code and response headers
    def get_project_workflow_job_metrics_with_http_info(project_slug, workflow_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.get_project_workflow_job_metrics ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling InsightsApi.get_project_workflow_job_metrics"
      end
      # verify the required parameter 'workflow_name' is set
      if @api_client.config.client_side_validation && workflow_name.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_name' when calling InsightsApi.get_project_workflow_job_metrics"
      end
      allowable_values = ["last-7-days", "last-90-days", "last-24-hours", "last-30-days", "last-60-days"]
      if @api_client.config.client_side_validation && opts[:'reporting_window'] && !allowable_values.include?(opts[:'reporting_window'])
        fail ArgumentError, "invalid value for \"reporting_window\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/insights/{project-slug}/workflows/{workflow-name}/jobs'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s)).sub('{' + 'workflow-name' + '}', CGI.escape(workflow_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page-token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'branch'] = opts[:'branch'] if !opts[:'branch'].nil?
      query_params[:'reporting-window'] = opts[:'reporting_window'] if !opts[:'reporting_window'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2004'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"InsightsApi.get_project_workflow_job_metrics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#get_project_workflow_job_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get summary metrics for a project's workflows
    # Get summary metrics for a project's workflows. Workflow runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token A token to retrieve the next page of results.
    # @option opts [String] :branch The name of a vcs branch. If not passed we will scope the API call to the default branch.
    # @option opts [String] :reporting_window The time window used to calculate summary metrics.
    # @return [InlineResponse2002]
    def get_project_workflow_metrics(project_slug, opts = {})
      data, _status_code, _headers = get_project_workflow_metrics_with_http_info(project_slug, opts)
      data
    end

    # Get summary metrics for a project&#39;s workflows
    # Get summary metrics for a project&#39;s workflows. Workflow runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token A token to retrieve the next page of results.
    # @option opts [String] :branch The name of a vcs branch. If not passed we will scope the API call to the default branch.
    # @option opts [String] :reporting_window The time window used to calculate summary metrics.
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def get_project_workflow_metrics_with_http_info(project_slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.get_project_workflow_metrics ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling InsightsApi.get_project_workflow_metrics"
      end
      allowable_values = ["last-7-days", "last-90-days", "last-24-hours", "last-30-days", "last-60-days"]
      if @api_client.config.client_side_validation && opts[:'reporting_window'] && !allowable_values.include?(opts[:'reporting_window'])
        fail ArgumentError, "invalid value for \"reporting_window\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/insights/{project-slug}/workflows'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page-token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'branch'] = opts[:'branch'] if !opts[:'branch'].nil?
      query_params[:'reporting-window'] = opts[:'reporting_window'] if !opts[:'reporting_window'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2002'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"InsightsApi.get_project_workflow_metrics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#get_project_workflow_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get recent runs of a workflow
    # Get recent runs of a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param workflow_name [String] The name of the workflow.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :branch The name of a vcs branch. If not passed we will scope the API call to the default branch.
    # @option opts [String] :page_token A token to retrieve the next page of results.
    # @option opts [Time] :start_date Include only executions that started at or after this date. This must be specified if an end-date is provided.
    # @option opts [Time] :end_date Include only executions that started before this date. This date can be at most 90 days after the start-date.
    # @return [InlineResponse2003]
    def get_project_workflow_runs(project_slug, workflow_name, opts = {})
      data, _status_code, _headers = get_project_workflow_runs_with_http_info(project_slug, workflow_name, opts)
      data
    end

    # Get recent runs of a workflow
    # Get recent runs of a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a real time financial reporting tool and should not be used for credit reporting. The most up to date credit information can be found in Plan Overview in the CircleCI UI.
    # @param project_slug [String] Project slug in the form &#x60;vcs-slug/org-name/repo-name&#x60;. The &#x60;/&#x60; characters may be URL-escaped.
    # @param workflow_name [String] The name of the workflow.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :branch The name of a vcs branch. If not passed we will scope the API call to the default branch.
    # @option opts [String] :page_token A token to retrieve the next page of results.
    # @option opts [Time] :start_date Include only executions that started at or after this date. This must be specified if an end-date is provided.
    # @option opts [Time] :end_date Include only executions that started before this date. This date can be at most 90 days after the start-date.
    # @return [Array<(InlineResponse2003, Integer, Hash)>] InlineResponse2003 data, response status code and response headers
    def get_project_workflow_runs_with_http_info(project_slug, workflow_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InsightsApi.get_project_workflow_runs ...'
      end
      # verify the required parameter 'project_slug' is set
      if @api_client.config.client_side_validation && project_slug.nil?
        fail ArgumentError, "Missing the required parameter 'project_slug' when calling InsightsApi.get_project_workflow_runs"
      end
      # verify the required parameter 'workflow_name' is set
      if @api_client.config.client_side_validation && workflow_name.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_name' when calling InsightsApi.get_project_workflow_runs"
      end
      # resource path
      local_var_path = '/insights/{project-slug}/workflows/{workflow-name}'.sub('{' + 'project-slug' + '}', CGI.escape(project_slug.to_s)).sub('{' + 'workflow-name' + '}', CGI.escape(workflow_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'branch'] = opts[:'branch'] if !opts[:'branch'].nil?
      query_params[:'page-token'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'start-date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end-date'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2003'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key_header', 'api_key_query', 'basic_auth']

      new_options = opts.merge(
        :operation => :"InsightsApi.get_project_workflow_runs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InsightsApi#get_project_workflow_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
